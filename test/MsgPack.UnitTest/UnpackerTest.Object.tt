<#@ template  debug="true" hostSpecific="true" #>
<#@ output extension=".cs" #>
<#@ Assembly Name="System.Core" #>
<#@ Assembly Name="System.Windows.Forms" #>
<#@ import namespace="System" #>
<#@ import namespace="System.IO" #>
<#@ import namespace="System.Diagnostics" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Collections" #>
<#@ import namespace="System.Collections.Generic" #> 
#region -- License Terms --
//
// MessagePack for CLI
//
// Copyright (C) 2016-2017 FUJIWARA, Yusuke
//
//    Licensed under the Apache License, Version 2.0 (the "License");
//    you may not use this file except in compliance with the License.
//    You may obtain a copy of the License at
//
//        http://www.apache.org/licenses/LICENSE-2.0
//
//    Unless required by applicable law or agreed to in writing, software
//    distributed under the License is distributed on an "AS IS" BASIS,
//    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//    See the License for the specific language governing permissions and
//    limitations under the License.
//
#endregion -- License Terms --

using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
#if !MSTEST
using NUnit.Framework;
#else
using TestFixtureAttribute = Microsoft.VisualStudio.TestPlatform.UnitTestFramework.TestClassAttribute;
using TestAttribute = Microsoft.VisualStudio.TestPlatform.UnitTestFramework.TestMethodAttribute;
using TimeoutAttribute = NUnit.Framework.TimeoutAttribute;
using Assert = NUnit.Framework.Assert;
using Is = NUnit.Framework.Is;
#endif

namespace MsgPack
{
	// This file was generated from UnpackerTest.Object.tt T4Template.
	// Do not modify this file. Edit UnpackerTest.Object.tt instead.

	partial class UnpackerTest
	{
<#
foreach ( var testCase in
	new []
	{
		new { Type = "PositiveFixNum",	Value = "1",	TypeTest = "IsTypeOf<byte>().GetValueOrDefault()",					ValueTest = "Assert.That( result.Equals( value ), \"Value: \" + result )",	 CountTest = default( string ) },
		new { Type = "NegativeFixNum",	Value = "-1",	TypeTest = "IsTypeOf<sbyte>().GetValueOrDefault()",					ValueTest = "Assert.That( result.Equals( value ), \"Value: \" + result )",	 CountTest = default( string ) },
		new { Type = "Int8",			Value = "-32",	TypeTest = "IsTypeOf<sbyte>().GetValueOrDefault()",					ValueTest = "Assert.That( result.Equals( value ), \"Value: \" + result )",	 CountTest = default( string ) },
		new { Type = "UInt8",			Value = "0x80",	TypeTest = "IsTypeOf<byte>().GetValueOrDefault()",					ValueTest = "Assert.That( result.Equals( value ), \"Value: \" + result )",	 CountTest = default( string ) },
		new { Type = "Int16",			Value = "Int16.MinValue",	TypeTest = "IsTypeOf<short>().GetValueOrDefault()",		ValueTest = "Assert.That( result.Equals( value ), \"Value: \" + result )",	 CountTest = default( string ) },
		new { Type = "UInt16",			Value = "UInt16.MaxValue",	TypeTest = "IsTypeOf<ushort>().GetValueOrDefault()",	ValueTest = "Assert.That( result.Equals( value ), \"Value: \" + result )",	 CountTest = default( string ) },
		new { Type = "Int32",			Value = "Int32.MinValue",	TypeTest = "IsTypeOf<int>().GetValueOrDefault()",		ValueTest = "Assert.That( result.Equals( value ), \"Value: \" + result )",	 CountTest = default( string ) },
		new { Type = "UInt32",			Value = "UInt32.MaxValue",	TypeTest = "IsTypeOf<uint>().GetValueOrDefault()",		ValueTest = "Assert.That( result.Equals( value ), \"Value: \" + result )",	 CountTest = default( string ) },
		new { Type = "Int64",			Value = "Int64.MinValue",	TypeTest = "IsTypeOf<long>().GetValueOrDefault()",		ValueTest = "Assert.That( result.Equals( value ), \"Value: \" + result )",	 CountTest = default( string ) },
		new { Type = "UInt64",			Value = "UInt64.MaxValue",	TypeTest = "IsTypeOf<ulong>().GetValueOrDefault()",		ValueTest = "Assert.That( result.Equals( value ), \"Value: \" + result )",	 CountTest = default( string ) },
		new { Type = "Real32",			Value = "Single.Epsilon",	TypeTest = "IsTypeOf<float>().GetValueOrDefault()",		ValueTest = "Assert.That( result.Equals( value ), \"Value: \" + result )",	 CountTest = default( string ) },
		new { Type = "Real64",			Value = "Double.Epsilon",	TypeTest = "IsTypeOf<double>().GetValueOrDefault()",	ValueTest = "Assert.That( result.Equals( value ), \"Value: \" + result )",	 CountTest = default( string ) },
		new { Type = "FixedArray",		Value = "Enumerable.Repeat( 1, 16 ).ToArray()",						TypeTest = "IsList",	ValueTest = "Assert.That( result.AsList().SequenceEqual( value.Select( i => ( MessagePackObject )i ) ), \"Value: \" + result )",		CountTest = "AsList()" },
		new { Type = "Array16",			Value = "Enumerable.Repeat( 1, UInt16.MaxValue ).ToArray()",		TypeTest = "IsList",	ValueTest = "Assert.That( result.AsList().SequenceEqual( value.Select( i => ( MessagePackObject )i ) ), \"Value: \" + result )",		CountTest = "AsList()" },
		new { Type = "Array32",			Value = "Enumerable.Repeat( 1, UInt16.MaxValue + 1 ).ToArray()",	TypeTest = "IsList",	ValueTest = "Assert.That( result.AsList().SequenceEqual( value.Select( i => ( MessagePackObject )i ) ), \"Value: \" + result )",		CountTest = "AsList()" },
		new { Type = "FixedMap",		Value = "Enumerable.Range( 1, 16 ).ToDictionary( i => i, i => ~i )",					TypeTest = "IsDictionary",	ValueTest = "DictionaryEquals( result.AsDictionary(), value )",		CountTest = "AsDictionary()" },
		new { Type = "Map16",			Value = "Enumerable.Range( 1, UInt16.MaxValue ).ToDictionary( i => i, i => ~i )",		TypeTest = "IsDictionary",	ValueTest = "DictionaryEquals( result.AsDictionary(), value )",		CountTest = "AsDictionary()" },
		new { Type = "Map32",			Value = "Enumerable.Range( 1, UInt16.MaxValue + 1 ).ToDictionary( i => i, i => ~i )",	TypeTest = "IsDictionary",	ValueTest = "DictionaryEquals( result.AsDictionary(), value )",		CountTest = "AsDictionary()" },
		new { Type = "FixedRaw",		Value = "new String( Enumerable.Repeat( 'a', 16 ).ToArray() )",						TypeTest = "IsTypeOf<string>().GetValueOrDefault()",	ValueTest = "Assert.That( result.AsString().Equals( value ), \"Value: \" + result )",		CountTest = "AsString()" },
		new { Type = "Str8",			Value = "new String( Enumerable.Repeat( 'a', Byte.MaxValue ).ToArray() )",			TypeTest = "IsTypeOf<string>().GetValueOrDefault()",	ValueTest = "Assert.That( result.AsString().Equals( value ), \"Value: \" + result )",		CountTest = "AsString()" },
		new { Type = "Str16",			Value = "new String( Enumerable.Repeat( 'a', UInt16.MaxValue + 1 ).ToArray() )",	TypeTest = "IsTypeOf<string>().GetValueOrDefault()",	ValueTest = "Assert.That( result.AsString().Equals( value ), \"Value: \" + result )",		CountTest = "AsString()" },
		new { Type = "Str32",			Value = "new String( Enumerable.Repeat( 'a', UInt16.MaxValue + 1 ).ToArray() )",	TypeTest = "IsTypeOf<string>().GetValueOrDefault()",	ValueTest = "Assert.That( result.AsString().Equals( value ), \"Value: \" + result )",		CountTest = "AsString()" },
		new { Type = "Bin8",			Value = "Enumerable.Repeat( ( byte )1, 16 ).ToArray()",						TypeTest = "IsTypeOf<byte[]>().GetValueOrDefault()",	ValueTest = "Assert.That( result.AsBinary().SequenceEqual( value ), \"Value: \" + result )",		CountTest = "AsBinary()" },
		new { Type = "Bin16",			Value = "Enumerable.Repeat( ( byte )1, UInt16.MaxValue ).ToArray()",		TypeTest = "IsTypeOf<byte[]>().GetValueOrDefault()",	ValueTest = "Assert.That( result.AsBinary().SequenceEqual( value ), \"Value: \" + result )",		CountTest = "AsBinary()" },
		new { Type = "Bin32",			Value = "Enumerable.Repeat( ( byte )1, UInt16.MaxValue + 1 ).ToArray()",	TypeTest = "IsTypeOf<byte[]>().GetValueOrDefault()",	ValueTest = "Assert.That( result.AsBinary().SequenceEqual( value ), \"Value: \" + result )",		CountTest = "AsBinary()" },
	}
)
{
#>
		[Test]
		public void TestReadObjectFrom<#= testCase.Type #>()
		{
			using ( var buffer = new MemoryStream() )
			using ( var packer = Packer.Create( buffer ) )
			{
				var value = <#= testCase.Value #>;
				packer.Pack( value );
				buffer.Position = 0;
				using ( var unpacker = this.CreateUnpacker( buffer ) )
				{
					MessagePackObject result;
					Assert.That( unpacker.ReadObject( out result ) );
					Assert.That( result.<#= testCase.TypeTest #>, "Type: <#= testCase.Type #>" );
					<#= testCase.ValueTest #>;
<#
	if ( testCase.CountTest != null )
	{
#>
					Assert.That( result.<#= testCase.CountTest #>.Count(), Is.EqualTo( value.Count() ), "Count:" + result );
<#
	}
#>
				}
			}
		}

<#
}
#>
		private static void DictionaryEquals( MessagePackObjectDictionary actual, IDictionary<int, int> expected )
		{
			foreach( var entry in actual )
			{
				int value;
				Assert.That( expected.TryGetValue( entry.Key.AsInt32(), out value ), "Key: " + entry.Key );
				Assert.That( entry.Value, Is.EqualTo( ( MessagePackObject )value ), "Value: " + entry.Key );
			}
		}
	}
}
