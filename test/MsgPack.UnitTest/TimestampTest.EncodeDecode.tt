<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ output extension=".cs" #>
<#@ assembly Name="System.Core" #>
<#@ include file="TimestampTest.Common.ttinclude" #>
<#@ import namespace="System" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.Globalization" #>
<#@ import namespace="System.Linq" #>
#region -- License Terms --
//
// MessagePack for CLI
//
// Copyright (C) 2017 FUJIWARA, Yusuke
//
//    Licensed under the Apache License, Version 2.0 (the "License");
//    you may not use this file except in compliance with the License.
//    You may obtain a copy of the License at
//
//        http://www.apache.org/licenses/LICENSE-2.0
//
//    Unless required by applicable law or agreed to in writing, software
//    distributed under the License is distributed on an "AS IS" BASIS,
//    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//    See the License for the specific language governing permissions and
//    limitations under the License.
//

#endregion -- License Terms --

using System;
using System.Globalization;
using System.Linq;

using MsgPack.Serialization;

#if !MSTEST
using NUnit.Framework;
#else
using TestFixtureAttribute = Microsoft.VisualStudio.TestPlatform.UnitTestFramework.TestClassAttribute;
using TestAttribute = Microsoft.VisualStudio.TestPlatform.UnitTestFramework.TestMethodAttribute;
using TimeoutAttribute = NUnit.Framework.TimeoutAttribute;
using Assert = NUnit.Framework.Assert;
using Is = NUnit.Framework.Is;
#endif

namespace MsgPack
{
	partial class TimestampTest
	{
<#
var cases =
	new []
	{
		new { Label = "Min32",	Seconds = 0L,						Nanoseconds = 0,			String = "1970-01-01T00:00:00.000000000Z",			Header = "new byte[] { 0xD6, 0xFF }",		Body = "new byte[]{ 0, 0, 0, 0 }" },
		new { Label = "Max32",	Seconds = ( long )UInt32.MaxValue,	Nanoseconds = 0,			String = "2106-02-07T06:28:15.000000000Z",			Header = "new byte[] { 0xD6, 0xFF }",		Body = "new byte[]{ 0xFF, 0xFF, 0xFF, 0xFF }" },
		new { Label = "Min64",	Seconds = 0L,						Nanoseconds = 1,			String = "1970-01-01T00:00:00.000000001Z",			Header = "new byte[] { 0xD7, 0xFF }",		Body = "new byte[]{ 0, 0, 0, 0x4, 0, 0, 0, 0 }" },
		new { Label = "Max64",	Seconds = 0x3FFFFFFFFL,				Nanoseconds = 999999999,	String = "2514-05-30T01:53:03.999999999Z",			Header = "new byte[] { 0xD7, 0xFF }",		Body = "new byte[]{ 0xEE, 0x6B, 0x27, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF }" },
		new { Label = "Min96",	Seconds = Int64.MinValue,			Nanoseconds = 0,			String = "-292277022657-01-27T08:29:52.000000000Z",	Header = "new byte[] { 0xC7, 12, 0xFF }",	Body = "new byte[] { 0, 0, 0, 0, 0x80, 0, 0, 0, 0, 0, 0, 0 }" },
		new { Label = "Max96",	Seconds = Int64.MaxValue,			Nanoseconds = 999999999,	String = "292277026596-12-04T15:30:07.999999999Z",	Header = "new byte[] { 0xC7, 12, 0xFF }",	Body = "new byte[] { 0x3B, 0x9A, 0xC9, 0xFF, 0x7F, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF }" },
	};

foreach ( var @case in cases )
{
#>
		[Test]
		public void TestEncode_<#= @case.Label #>()
		{
			Assert.That(
				new Timestamp( <#= @case.Seconds #>L, <#= @case.Nanoseconds #> ).Encode(),
				Is.EqualTo( MessagePackExtendedTypeObject.Unpack( 0xFF, <#= @case.Body #> ) )
			);
		}

<#
}

foreach ( var @case in cases )
{
#>
		[Test]
		public void TestDecode_<#= @case.Label #>()
		{
			var result = Timestamp.Decode( MessagePackSerializer.UnpackMessagePackObject( <#= @case.Header #>.Concat( <#= @case.Body #> ).ToArray() ).AsMessagePackExtendedTypeObject() );
			Assert.That( result.UnixEpochSecondsPart, Is.EqualTo( <#= @case.Seconds #>L ) );
			Assert.That( result.NanosecondsPart, Is.EqualTo( <#= @case.Nanoseconds #> ) );
			Assert.That( result.ToString(), Is.EqualTo( "<#= @case.String #>" ) );
		}

<#
}
#>
		[Test]
		public void TestDecode_Min64_AllZero()
		{
			var result = Timestamp.Decode( MessagePackSerializer.UnpackMessagePackObject( new byte[] { 0xD7, 0xFF, 0, 0, 0, 0, 0, 0, 0, 0 } ).AsMessagePackExtendedTypeObject() );
			Assert.That( result.UnixEpochSecondsPart, Is.EqualTo( 0 ) );
			Assert.That( result.NanosecondsPart, Is.EqualTo( 0 ) );
			Assert.That( result.ToString(), Is.EqualTo( "1970-01-01T00:00:00.000000000Z" ) );
		}

		[Test]
		public void TestDecode_Min64_MinSeconds()
		{
			var result = Timestamp.Decode( MessagePackSerializer.UnpackMessagePackObject( new byte[] { 0xD7, 0xFF, 0, 0, 0, 0x1, 0, 0, 0, 0 } ).AsMessagePackExtendedTypeObject() );
			Assert.That( result.UnixEpochSecondsPart, Is.EqualTo( 0x100000000L ) );
			Assert.That( result.NanosecondsPart, Is.EqualTo( 0 ) );
			Assert.That( result.ToString(), Is.EqualTo( "2106-02-07T06:28:16.000000000Z" ) );
		}

<#
foreach ( var length in new [] { 0, 3, 5, 7, 9, 11, 13 } )
{
#>
		[Test]
		public void TestDecode_InvalidLength_<#= length #>()
		{
			Assert.Throws<ArgumentException>( () => Timestamp.Decode( MessagePackExtendedTypeObject.Unpack( 0xFF, new byte [ <#= length #> ] ) ) );
		}

<#
}
#>
		[Test]
		public void TestDecode_InvalidTypeCode()
		{
			Assert.Throws<ArgumentException>( () => Timestamp.Decode( default( MessagePackExtendedTypeObject ) ) );
		}
	}
}
